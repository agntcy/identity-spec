# Generated with protoc-gen-openapi
# https://github.com/google/gnostic/tree/master/cmd/protoc-gen-openapi

openapi: 3.0.3
info:
    title: Identity
    description: Identity
    contact:
        name: Agntcy Team
        url: https://github.com/agntcy/identity
        email: identity@agntcy.org
    version: v1alpha1
servers:
    - url: http://0.0.0.0:4000
      description: Local environment
paths:
    /v1alpha1/did/generate:
        post:
            tags:
                - DidService
            description: Generate a Did
            operationId: DidService_Generate
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Issuer'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DidDocument'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1alpha1/did/resolve:
        post:
            tags:
                - DidService
            description: Resolve an Did
            operationId: DidService_Resolve
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ResolveRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DidDocument'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1alpha1/issuer/keygen:
        get:
            tags:
                - IssuerService
            description: Generate a keypair in JWK format
            operationId: IssuerService_KeyGen
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Jwk'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1alpha1/issuer/register:
        post:
            tags:
                - IssuerService
            description: Register
            operationId: IssuerService_Register
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Issuer'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RegisterResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1alpha1/issuer/{commonName}/.well-known/did.json:
        get:
            tags:
                - IssuerService
            description: WellKnown endpoint resolved by did:web:{NODE}:{common_name} method
            operationId: IssuerService_WellKnown
            parameters:
                - name: commonName
                  in: path
                  description: The common name of the issuer
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Jwks'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1alpha1/vc/issue:
        post:
            tags:
                - VcService
            description: Issue
            operationId: VcService_Issue
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/IssueRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/EnvelopedVerifiableCredential'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1alpha1/vc/publish:
        post:
            tags:
                - VcService
            description: Publish
            operationId: VcService_Publish
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/EnvelopedVerifiableCredential'
                required: true
            responses:
                "200":
                    description: OK
                    content: {}
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1alpha1/vc/search:
        post:
            tags:
                - VcService
            description: Search
            operationId: VcService_Search
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SearchRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SearchResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1alpha1/vc/verify:
        post:
            tags:
                - VcService
            description: Verify
            operationId: VcService_Verify
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/EnvelopedVerifiableCredential'
                required: true
            responses:
                "200":
                    description: OK
                    content: {}
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
components:
    schemas:
        CredentialContent:
            type: object
            properties:
                contentType:
                    enum:
                        - CREDENTIAL_CONTENT_TYPE_UNSPECIFIED
                        - CREDENTIAL_CONTENT_TYPE_AGENT_PASSPORT
                    type: string
                    description: Type specifies the type of the content of the credential.
                    format: enum
                content:
                    type: string
                    description: The content representation in JSON-LD format.
            description: CredentialContent represents the content of a Verifiable Credential.
        CredentialSchema:
            type: object
            properties:
                type:
                    type: string
                    description: Type specifies the type of the file
                id:
                    type: string
                    description: The URL identifying the schema file
            description: |-
                CredentialSchema represents the credentialSchema property of a Verifiable Credential.
                 more information can be found [here]

                 [here]: https://www.w3.org/TR/vc-data-model-2.0/#data-schemas
        DidDocument:
            type: object
            properties:
                id:
                    type: string
                    description: |-
                        The DID {ID}
                         A did could be represented as `did:agntcy:{ID}`
                         The metadata below is related as claims to the {ID}
                node:
                    type: string
                    description: The node that was used to publish the document
                controller:
                    type: array
                    items:
                        type: string
                    description: |-
                        Controller defines an entity that is authorized to make changes to a DID document.
                         The process of authorizing a DID controller is defined by the DID method.
                         It can be a string or a list of strings.
                verificationMethod:
                    type: array
                    items:
                        $ref: '#/components/schemas/VerificationMethod'
                    description: |-
                        VerificationMethod is a list of cryptographic public keys, which can be used to authenticate or authorize
                         interactions with the DID subject or associated parties.
                service:
                    type: array
                    items:
                        $ref: '#/components/schemas/Service'
                    description: |-
                        Service expresses ways of communicating with the DID subject or associated entities.
                         A service can be any type of service the DID subject wants to advertise.
                         spec reference: https://www.w3.org/TR/did-core/#verification-methods
                assertionMethod:
                    type: array
                    items:
                        type: string
                    description: |-
                        AssertionMethod is used to specify how the DID subject is expected to express claims,
                         such as for the purposes of issuing a Verifiable Credential.
            description: |-
                DidDocument represents a set of data describing the DID subject including mechanisms such as:
                   - cryptographic public keys - used to authenticate itself and prove
                     association with the DID
                   - services - means of communicating or interacting with the DID subject or
                     associated entities via one or more service endpoints.
                     Examples include discovery services, agent services,
                     social networking services, file storage services,
                     and verifiable credential repository services.

                 A DID Document can be retrieved by resolving a DID URI.
        EnvelopedVerifiableCredential:
            type: object
            properties:
                envelopeType:
                    enum:
                        - VERIFIABLE_CREDENTIAL_ENVELOPE_TYPE_UNSPECIFIED
                        - VERIFIABLE_CREDENTIAL_ENVELOPE_TYPE_JOSE
                    type: string
                    description: EnvelopeType specifies the type of the envelope used to store the credential.
                    format: enum
                value:
                    type: string
                    description: Value is the enveloped credential in the specified format.
            description: EnvelopedVerifiableCredential represents a Verifiable Credential enveloped in a specific format.
        GoogleProtobufAny:
            type: object
            properties:
                '@type':
                    type: string
                    description: The type of the serialized message.
            additionalProperties: true
            description: Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
        IssueRequest:
            type: object
            properties:
                id:
                    type: string
                    description: |-
                        ID is the method-specific identifier in the DID URI.
                         Spec: https://www.w3.org/TR/did-core/#method-specific-id
                         Agntcy DID has the following format: did:agntcy:{id}
                content:
                    allOf:
                        - $ref: '#/components/schemas/CredentialContent'
                    description: Content of the VC
                envelopeType:
                    enum:
                        - VERIFIABLE_CREDENTIAL_ENVELOPE_TYPE_UNSPECIFIED
                        - VERIFIABLE_CREDENTIAL_ENVELOPE_TYPE_JOSE
                    type: string
                    description: Envelope type
                    format: enum
            description: IssueRequest is a request to issue a VC
        Issuer:
            type: object
            properties:
                organization:
                    type: string
                    description: The organization of the issuer
                subOrganization:
                    type: string
                    description: The sub organization of the issuer
                commonName:
                    type: string
                    description: |-
                        The common name of the issuer
                         Could be a FQDN or a FQDA
                publicKey:
                    allOf:
                        - $ref: '#/components/schemas/Jwk'
                    description: |-
                        The keys of the issuer in JWK format
                         The public key is used to verify the signature of the different claims
                privateKey:
                    allOf:
                        - $ref: '#/components/schemas/Jwk'
                    description: The private key of the issuer in JWK format
            description: A Identity Issuer
        Jwk:
            type: object
            properties:
                alg:
                    type: string
                    description: |-
                        ALG represents the algorithm intended for use with the key.
                         Example algorithms for Post-Quantum ML-DSA family:
                         "ML-DSA-44", "ML-DSA-65", "ML-DSA-87".
                         Some example algorithms are "RS256", "RS384", "RS512" for RSA algorithms.
                kty:
                    type: string
                    description: |-
                        KTY represents the key type parameter.
                         It specifies the family of quantum algorithms used with the key,
                         such as "AKP" for post quantum algorithms
                         or "RSA" for non quantum algorithms.
                use:
                    type: string
                    description: |-
                        Use represents the intended use of the key.
                         Some example values are "enc" and "sig".
                kid:
                    type: string
                    description: |-
                        KID represents the key ID.
                         It is used to match a specific key.
                pub:
                    type: string
                    description: The public key for the AKP kty.
                priv:
                    type: string
                    description: The private key for the AKP kty.
                seed:
                    type: string
                    description: Seed used to derive keys for ML-DSA alg.
                e:
                    type: string
                    description: The exponent for the RSA public key.
                n:
                    type: string
                    description: The modulus for the RSA public key.
                d:
                    type: string
                    description: The private exponent for the RSA kty.
                p:
                    type: string
                    description: The first prime factor for the RSA private key.
                q:
                    type: string
                    description: The second prime factor for the RSA private key.
                dp:
                    type: string
                    description: The first factor CRT exponent for the RSA private key.
                dq:
                    type: string
                    description: The second factor CRT exponent for the RSA private key.
                qi:
                    type: string
                    description: The first CRT coefficient for the RSA private key.
            description: |-
                JWK represents:
                 - a JSON Web Key (JWK) with the respective fields specific to RSA algorithms.
                 - a Quantum JSON Web Key (QJWK) with the respective fields specific to NTRU and LWE algorithms.
        Jwks:
            type: object
            properties:
                keys:
                    type: array
                    items:
                        $ref: '#/components/schemas/Jwk'
                    description: Keys represents the list of JSON Web Keys.
            description: JWKS represents a set of JSON Web Keys (JWKs).
        RegisterResponse:
            type: object
            properties:
                uri:
                    type: string
                    description: A uri indicating an action to take to complete the registration.
        ResolveRequest:
            type: object
            properties:
                id:
                    type: string
                    description: |-
                        ID is the method-specific identifier in the DID URI.
                         Spec: https://www.w3.org/TR/did-core/#method-specific-id
                         Agntcy DID has the following format: did:agntcy:{id}
        SearchRequest:
            type: object
            properties:
                id:
                    type: string
                    description: |-
                        ID is the method-specific identifier in the DID URI.
                         Spec: https://www.w3.org/TR/did-core/#method-specific-id
                         Agntcy DID has the following format: did:agntcy:{id}
                schema:
                    allOf:
                        - $ref: '#/components/schemas/CredentialSchema'
                    description: Schema is the schema of the credential contained in the VC
                content:
                    type: string
                    description: The credential content representation in JSON-LD format
            description: SearchRequest is a request to seach for VCs
        SearchResponse:
            type: object
            properties:
                credentials:
                    type: array
                    items:
                        $ref: '#/components/schemas/EnvelopedVerifiableCredential'
                    description: The list of VCs that match the search criteria
        Service:
            type: object
            properties:
                id:
                    type: string
                    description: |-
                        Id is the value of the id property and MUST be a URI conforming to RFC3986.
                         A conforming producer MUST NOT produce multiple service entries with
                         the same id. A conforming consumer MUST produce an error if it detects
                         multiple service entries with the same id.
                type:
                    type: string
                    description: |-
                        Type is an example of registered types which can be found
                         here: https://www.w3.org/TR/did-spec-registries/#service-types
                serviceEndpoint:
                    type: array
                    items:
                        type: string
                    description: |-
                        ServiceEndpoint is a network address, such as an HTTP URL, at which services
                         operate on behalf of a DID subject.
            description: |-
                Service is used in DID documents to express ways of communicating with
                 the DID subject or associated entities.
                 A service can be any type of service the DID subject wants to advertise.

                 Specification Reference: https://www.w3.org/TR/did-core/#services
        Status:
            type: object
            properties:
                code:
                    type: integer
                    description: The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
                    format: int32
                message:
                    type: string
                    description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
                details:
                    type: array
                    items:
                        $ref: '#/components/schemas/GoogleProtobufAny'
                    description: A list of messages that carry the error details.  There is a common set of message types for APIs to use.
            description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
        VerificationMethod:
            type: object
            properties:
                id:
                    type: string
                    description: A unique id of the verification method.
                type:
                    type: string
                    description: |-
                        references exactly one verification method type. In order to maximize global
                         interoperability, the verification method type SHOULD be registered in the
                         DID Specification Registries: https://www.w3.org/TR/did-spec-registries/
                controller:
                    type: string
                    description: 'a value that conforms to the rules in DID Syntax: https://www.w3.org/TR/did-core/#did-syntax'
                publicKeyJwk:
                    allOf:
                        - $ref: '#/components/schemas/Jwk'
                    description: 'specification reference: https://www.w3.org/TR/did-core/#dfn-publickeyjwk'
            description: |-
                VerificationMethod expresses verification methods, such as cryptographic
                 public keys, which can be used to authenticate or authorize interactions
                 with the DID subject or associated parties. For example,
                 a cryptographic public key can be used as a verification method with
                 respect to a digital signature; in such usage, it verifies that the
                 signer could use the associated cryptographic private key.

                 Specification Reference: https://www.w3.org/TR/did-core/#verification-methods
    headers:
        "":
    securitySchemes: {}
security:
    - {}
tags:
    - name: DidService
      description: DidService is the service that provides DID operations.
    - name: IssuerService
      description: IssuerService is the service that provides ISSUER operations.
    - name: VcService
      description: VC is the service that provides VC operations.
